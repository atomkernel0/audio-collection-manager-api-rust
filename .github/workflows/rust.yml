name: Rust CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang libclang-dev
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm
    
    - name: Create test environment file
      run: |
        echo "DB_URL=${{ secrets.DB_URL_TEST }}" > .env
        echo "DB_NS=test" >> .env
        echo "DB_NAME=test_ci_${{ github.run_id }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER_TEST }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD_TEST }}" >> .env
        echo "HCAPTCHA_SECRET=${{ secrets.HCAPTCHA_SECRET_TEST }}" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET_TEST }}" >> .env
        echo "WEBSITE_URL=http://localhost:3000" >> .env
        echo "TOKEN_DURATION_MIN=120" >> .env
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy -- -D warnings
    
    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt -- --check

  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang libclang-dev
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Create minimal env for build check
      run: |
        echo "DB_URL=memory" > .env
        echo "DB_NS=test" >> .env
        echo "DB_NAME=test" >> .env
        echo "DB_USER=test" >> .env
        echo "DB_PASSWORD=test" >> .env
        echo "HCAPTCHA_SECRET=test" >> .env
        echo "JWT_SECRET=test_secret_key" >> .env
        echo "WEBSITE_URL=http://localhost" >> .env
        echo "TOKEN_DURATION_MIN=120" >> .env
    
    - name: Build release
      run: cargo build --release --verbose

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit
